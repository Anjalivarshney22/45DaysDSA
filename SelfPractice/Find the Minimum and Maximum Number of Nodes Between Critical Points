class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        if (head == null || head.next == null || head.next.next == null) {
            return new int[]{-1, -1};
        }

        ArrayList<Integer> list = new ArrayList<>();
        ListNode prev = head;
        ListNode cur = head.next;
        int index = 1;

        while (cur.next != null) {
            ListNode next = cur.next;
            if ((cur.val > prev.val && cur.val > next.val) || (cur.val < prev.val && cur.val < next.val)) {
                list.add(index);
            }
            prev = cur;
            cur = next;
            index++;
        }

        if (list.size() < 2) {
            return new int[]{-1, -1};
        }

        int min = Integer.MAX_VALUE;
        int max = list.get(list.size() - 1) - list.get(0);

        for (int i = 1; i < list.size(); i++) {
            int dist = list.get(i)-list.get(i - 1);
            min = Math.min(min, dist);
        }

        return new int[]{min, max};
    }
}
